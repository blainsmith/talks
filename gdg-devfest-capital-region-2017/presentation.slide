With Concurrency Comes Great Responsibility
GDG DevFest Capital Region 2017
28 Oct 2017

Blain Smith
http://bearded.af
http://github.com/blainsmith/talks
http://agnostechvalley.com
@blainsmith
@agnostechvalley

* Obligatory Intro

*Kinetic*, wearable technology to reduce unsafe postures in the workplace

.link https://wearkinetic.com

*Odd* *Networks*, video analytics, intelligent caching, content delivery APIs, app design & development

.link https://oddnetworks.com

*MadGlory*, Legendary Game Services like recommendation engines, online profiles, tournament systems

.link http://madglory.com

*Open* *Source*, newb Go contributor, full-text search with Redis (Go), seahash ported to Go, some other Node.js things too

* So, what is "concurrency"?

"[C]oncurrency is the *composition* of independently executing processes, while parallelism is the *simultaneous* *execution* of (possibly related) computations. Concurrency is about *dealing* with lots of things at once. Parallelism is about *doing* lots of things at once."

- *compostion/dealing*: This is how we, as software engineers, *write* *code* to allow for processes to execute.
- *simultaneous/doing*: When our software is running those processes *could* execute at the same time.
- You can *write* *concurrent* *code*, but it it does not mean it will run *simultaneously*. Concurrent code cannot run in parallel on a single core.
- If that same code is put on a multi-core machine then it could run in parallel without code changes.

* How does Go support concurrency?

Communicating Sequential Processes (CSP) is a formal language for describing patterns of interaction in concurrent systems by way of message passing via *channels* from one *process* to another.

.link http://usingcsp.com

- *channels*: This is the commication method Go supports that is a first class citizen "channel" that is typed.
- *processes*: Spawning a process in Go is called a goroutine. Weighing in at around 4k per spawned goroutine.

    configchan := make(chan Cfg)

    +-------------------------+   Cfg{3, true}   +-------------------------+
    | go processA(configchan) <------------------> go processB(configchan) |
    +-------------------------+                  +-------------------------+

* What kinds of concurrency patterns exist?

- Coroutines
- Timeouts
- Wait Groups
- Semaphores and Mutexes
- Futures and Promises
- Generators
- Producers/Fan Out
- Consumers/Fan In
- Piplines

* Coroutines Visual

"[C]omponents that generalize subroutines for non-preemptive multitasking..."

    +----------------+
    |      main      |
    +-------+--------+
            |
            |
            |
    +-------+---------
    |  expensiveTask |
    +-----------------

* Coroutines Code

.play code/coroutines.go  /START coroutines OMIT/,/END coroutines OMIT/

* Coroutines with Timeout

.play code/timeouts.go  /START timeouts OMIT/,/END timeouts OMIT/

* Wait Groups

"A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished."

* Wait Groups

.play code/fast-exit.go  /START fast-exit OMIT/,/END fast-exit OMIT/

* Wait Groups Code

Adding a WaitGroup blocks the main goroutine from exiting so we can wait for the rest to complete.

.play code/waitgroup.go  /START waitgroup OMIT/,/END waitgroup OMIT/

* Semaphores/Mutexes

"[A] variable or abstract data type used to control access to a common resource by multiple processes in a concurrent system such as a multiprogramming operating system."

    +----------------+          +----------------+
    |      main      <----X-----+   func()       | count++
    |                |          +----------------+
    |   count = 10   |          +----------------+
    |                <----X-----+   func()       | count += 5
    |                |          +----------------+
    |                |          +----------------+
    |                <----------+   func()       | count = 0
    +----------------+          +----------------+

* Semaphores/Mutexes (Data Race)

.play code/data-race.go   /START data-race OMIT/,/END data-race OMIT/

* Semaphores/Mutexes

.play code/mutex.go   /START mutex OMIT/,/END mutex OMIT/

* Futures and Promises

"[C]onstructs used for synchronizing program execution. [A]n object that acts as a proxy for a result that is initially unknown, usually because the computation of its value is yet incomplete."

    +------------+          +------------------------+
    |    main    +----------> expensiveSquareCompute |
    |     +      <----------+                        |
    |     |      |          +------------------------+
    |     |      +----------> expensiveSquareCompute |
    |     |      <----------+                        |
    |     v      |          +------------------------+
    | addSquares +----------> expensiveSquareCompute |
    |            <----------+                        |
    +------------+          +------------------------+

* Futures and Promises

.play code/futures-promises.go  /START main OMIT/,/END main OMIT/

* Generators

"[S]pecial routine that can be used to control the iteration behaviour of a loop. [L]ooks like a function but behaves like an iterator."

    +----------------+                 +----------------+          +----------------+
    |      main      +----------------->   generateIDs  +---------->   func()       |
    +----------------+                 +----------------+          +----------------+
                                                        |          +----------------+
                                                        +---------->   func()       |
                                                        |          +----------------+
                                                        |          +----------------+
                                                        +---------->   func()       |
                                                                   +----------------+

* Generators

.code code/generators.go  /START generator-1 OMIT/,/END generator-1 OMIT/

* Generators

.play code/generators.go  /START generator-2 OMIT/,/END generator-2 OMIT/

* Produce/Fan Out

A instance where a process spawns other processes to perform a task, but does not return the results to the calling process.

    +----------------+          +----------------+
    |      main      +---------->   bgJob()      |
    |                |          +----------------+
    |                |          +----------------+
    |                +---------->   bgJob()      |
    |                |          +----------------+
    |                |          +----------------+
    |                +---------->   bgJob()      |
    +----------------+          +----------------+

* Produce/Fan Out

.code code/fan-out.go   /START fan-out-1 OMIT/,/END fan-out-1 OMIT/

* Produce/Fan Out Code

.play code/fan-out.go   /START fan-out-2 OMIT/,/END fan-out-2 OMIT/

Notice we are not collecting the results of the sq() function.

* Consume/Fan In

A instance where a process spawns other processes to perform a task. The spawned processes return the result of their work either to the calling process or allow another process to read them.

    +----------------+          +----------------+
    |      main      +---------->   someTask()   +--+
    |                |          +----------------+  |
    |                |          +----------------+  |
    |                +---------->   someTask()   +--+
    |                |          +----------------+  |
    |                |          +----------------+  |
    |                +---------->   someTask()   +--+
    +-------^--------+          +----------------+  |
            |                                       |
            +---------------------------------------+

* Consume/Fan In

.play code/fan-in.go   /START fan-in-1 OMIT/,/END fan-in-1 OMIT/

sq() now creates a channel in which to send its results on and returns it.

* Consume/Fan In

.play code/fan-in.go   /START fan-in-2 OMIT/,/END fan-in-2 OMIT/

* Consume/Fan In

.play code/fan-in.go   /START fan-in-3 OMIT/,/END fan-in-3 OMIT/

* Pipelines

"[A] pipeline consists of a chain of processing elements (processes, threads, coroutines, functions, etc.), arranged so that the output of each element is the input of the next; the name is by analogy to a physical pipeline."

    +---------------+   +------------+   +------------+   +------------+   +---------------+
    |   produce()   +---> +--------+ +---> +--------+ +---> +--------+ +--->   consume()   |
    +---------------+   | | work() | |   | | work() | |   | | work() | |   +---------------+
                        | +--------+ |   | +--------+ |   | +--------+ |
                        |            |   |            |   |            |
                        | +--------+ |   | +--------+ |   | +--------+ |
                        | | work() | |   | | work() | |   | | work() | |
                        | +--------+ |   | +--------+ |   | +--------+ |
                        |            |   |            |   |            |
                        | +--------+ |   | +--------+ |   | +--------+ |
                        | | work() | |   | | work() | |   | | work() | |
                        | +--------+ |   | +--------+ |   | +--------+ |
                        +------------+   +------------+   +------------+

* Pipelines

.play code/pipeline.go   /START pipeline OMIT/,/END pipeline OMIT/

* On Goroutines and Channels

- Each goroutine costs 2 kilobytes of memory
- Channels are typed, so you can send user defined types and structs over them
- os/signal has a good use of channels in the stdlib
- net/http spawns a goroutine to handle each incoming request

* Things to remember...

"Don't communicate by sharing memory, share memory by communicating."

"Concurrency is not parallelism."

"Channels orchestrate; mutexes serialize."

Use channels and goroutines when appropriate. Not everything has to be done over channels.

* Further Reading

.link https://www.goinggo.net/2017/10/the-behavior-of-channels.html
.link https://blog.golang.org/concurrency-is-not-parallelism
.link https://blog.golang.org/context