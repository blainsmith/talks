Go: Modern Language with Classic Roots

Blain Smith

http://bearded.af
@blainsmith

http://agnostechvalley.com
@agnostechvalley

* What is Go?

- Compiled
- Type-safe
- Concurrency
- Garbage Collection

.image ./img/gopher-lifting.gif

* Who created Go?

Lots of smart Googlers whiteboarded in late-2007 and Go 1.0 releases in 2012

- Robert Griesemer: 15 years in C++, language designer
- Rob Pike (@rob_pike) & Ken Thompson: AT&T Bell Labs, Plan9 system designer, first window system for Unix, B programming language
- Russ Cox (@_rsc) & Ian Lance Tayler: Go compiler work

.image ./img/vintage-att.jpg

* Why is it called "Go"?

.image ./img/inspector-gadget.gif

* Why is it called "Go"?

.image ./img/alphago.gif

.link https://www.alphagomovie.com

* Why create Go?

- Not many new systems languages created in over a decade
- Very connected world with the internet
- Moved on from single core to multi core machines
- Massive clusters of computers
- Older systems languages like C and C++ designed prior to these advancements

.image ./img/caddy-shack-gopher.gif

* Primary GOals

- Safety: type and memory safe
- Offer concurrency and communication
- Efficient low-latency garbage collection
- Fast compile
- Simplicity and readability

.image ./img/hockey-spin-goal.gif

* Features in Go

- Go is purposefully different.
- Go does not try to be like the other languages.
- Go does not compete on features.
- Adding features to Go would not make it better, just bigger. That would make Go less interesting by being less different.

.link https://talks.golang.org/2015/simplicity-is-complicated.slide#9

.image ./img/kiss.gif

* Go's Design

- Few orthogonal concepts rather than a lot of overlapping ones
- Very small keyword list (new, make, for, select, etc...)
- Reduce stuttering: `foo.Foo *myFoo = new foo.Foo(foo.FOO_INIT)`
- Strong object-oriented design, but no type hierarchies (Java): a Child is a Person, a Guardian is a Person, a Person is a Human, a Human is a Mammal, etc..
- Robust toolset for compiling, testing, profiling, and debugging

.image ./img/gopher-coding.gif

* Go's Highlights

- Object-oriented with virtual interfaces
- Concurrency with goroutines and channels
- Built-in modern tooling

.image ./img/highlights.gif

* Hello World!

.play code/helloworld.go

.link http://play.golang.org

.image ./img/blainsmith-gopher.png

* Concurrent Fibonacci

.play code/fibonacci.go

* Object-Oriented: Java Inheritence

.code code/inheritence.java

* Object-Oriented: Java Interfaces

.code code/interface.java

* Object-Oriented: Go Interfaces

Go's approach to object-oriented programming. No extends or implements needed.

.code code/interface.go /START decl OMIT/,/END decl OMIT/

* Object-Oriented: Go Interfaces (cont.)

.play code/interface.go /START main OMIT/,/END main OMIT/

- Both Developer and Designer implement (have a method) `Name() string` so they satisfy Person
- Methods can be added to any type to implement an interface
- Introduces more flexibility when creating objects and interfaces
- Makes extending and interacting with the Go standard libary very nice

* Concurrency with CSP

Communicating Sequential Processes (CSP) is a formal language for describing patterns of interaction in concurrent systems by way of message passing via *channels* from one *process* to another.

.image ./img/concurrency.gif

* Goroutines and Channels

- Concurrency is hard. PERIOD!
- Concurrency is worse when there is no garbage collection.
- Use channels to communicate between separately running goroutines.

.play code/serial.go

* Goroutines and Channels (cont.)

.play code/goroutines.go

* Goroutines and Channels (cont.)

.play code/channels.go

* What kinds of concurrency patterns can you construct?

- Coroutines
- Timeouts
- Wait Groups
- Semaphores and Mutexes
- Futures and Promises
- Generators
- Producers/Fan Out
- Consumers/Fan In
- Piplines

* Tooling: Cross Compile

.code code/cross-compile.txt

Many different permutations of GOOS and GOARCH.

.link https://build.golang.org

.image ./img/voltron.gif

* Tooling: Performance Profiling

.image ./img/profile-graph.png

* Tooling: Performance Profiling (cont.)

.code code/memory-usage.txt

* Go Uses?

*Who*

- Big: Google (of course), CloudFlare, Dropbox, SoundCloud, Netflix
- Medium: Fastly, SendGrid, GoPro, Daily Burn
- Small: Kinetic, MadGlory, Odd Networks, Apprenda

*What*

- Containerization: Docker, Kubernetes
- Databases: InfluxDB, CockroachDB, DGraph
- Web Services: Prometheus (monitoring), Gogs (self-hosted Git), Geth (Ethereum-based blockchain)
- AI & Machine Learning
- Web Development: REST services, CMS (gohugo.io), etc.
- Queuing: NSQ, Nats.io

* Go Benefits

*Developers*

- Type safety, concurrency, and great tooling
- Compile object files without the need for a VM (JVM, LVVM, BEAM)
- Offers a dynamic language feel with interfaces and built-in reflect package
- StdLib: Math, OS, IO, HTTP, Hashing, Networking, Logging, CLI Parsing
- Side effect of learning idioms and concepts that stem from classic computer science

.image ./img/hackers.gif

* Go Benefits

*Businesses*

- Go developers are increasing in numbers (28,000+ members in the Go Slack group)
- Lower infrastructure costs due to lower memory and processing needs
- Robust production systems reduce developer context switching for support and bug fixes

.image ./img/emperor-palpatine-good.gif

* Further Resources

.link http://golang.org
.link https://github.com/golang/go
.link https://slack.agnostechvalley.com

.image https://media.giphy.com/media/JEhCPFfqi2Hy8/giphy.gif